#!/bin/sh


# This script performs a (currently truffle/ganache-cli-based) execution of a
# contract, and produces program measurement results.
#
# It expects a truffle project directory argument, will execute the contract with
# the given test.js file, and stores results in the "results" sub directoy
#
# TODO 1
# - This should also support aleth instead of ganache-cli (main motivating factor
# to get started on this script), but truffle/aleth do not appear to play well.
# To get started 
#
#  - run aleth:
#     ./build/aleth/aleth  --test --private privateChain --config genesis.json --db-path blockchain --no-discovery -m on --network-id 16
#     ... with a genesis.json containing  "allowFutureBlocks" : true
#  - run jsonrpcproxy.py to redirect the RPC FIFO to TCP socket 8545? see lsof -i
#  - run truffle test with correct RPC port in truffle.js
# TODO 2
# This is probably currently missing some components from run-one-test.sh, such
# as support code injections from the mutator. The tasks shold be separated more
# clearly e.g. as follows:
#
#     generate-contract.sh          - create base contract files
#     run-single-contract.sh        - for each in original, possibly instrumented, mutated:
#       ... possible prepare-and-run.sh wrapper for standalone use:
#         prepare-contract-truffle.sh   - build truffle project structure
#                                         perform preparations such as support code
#                                         generate transactions if not already present
#                                         (for external contracts not generated by us)
#         simple-run-contract.sh        - assume everything is in place and run it
#     
killall node


SETTINGS=`dirname $0`/../../settings.cfg.sh
if ! . "$SETTINGS"; then
        echo Error: Cannot load settings file $SETTINGS - please run setup.sh
        exit 1
fi

export PATHSDIR=`dirname $0`/..
. "$PATHSDIR"/paths.cfg.sh
if ! test "$?" = 0; then
        echo Error: Cannot load "$PATHSDIR"/paths.cfg.sh
        exit 1
fi




usage() {
	echo "Usage: run-contract.sh [truffle-project-dir]" 
	exit 1
}

if ! test "$#" = 1; then
	usage
fi

PROJDIR="$1"
RESULTDIR=results
#GANACHE_CLI_PATH="$PWD"/node_modules/ethereumjs-testrpc-sc/build/cli.node.js
#GANACHE_CLI_PATH="$PWD"/node_modules/ganache-cli/build/cli.node.js

TOOLS_DIR_NAME=`dirname $0`
GANACHE_CLI_PATH=`realpath $TOOLS_DIR_NAME/../node_modules/.bin/ganache-cli`
TRUFFLE_PATH=`realpath $TOOLS_DIR_NAME/../node_modules/.bin/truffle`
EXTERNAL_COMPILER_SCRIPT_PATH=`realpath $TOOLS_DIR_NAME/external-solc/external-solc-for-all.sh`
GETH_START_SCRIPT_PATH=`realpath $TOOLS_DIR_NAME/start-geth.sh`
RUN_BACKGROUND_SCRIPT_PATH=`realpath $TOOLS_DIR_NAME/../../tools/run-background.sh`

TRUFFLE_CONFIG_DIR=`realpath $TRUFFLE_CONFIG_DIR`


# Setup current optimization settings in truffle configuration
# Note that if an external compiler binary is used, external-solc.sh will currently pick up 
# the settings # from settings.cfg.sh itself, so this is a bit awkward
if test "$USE_SOLC_OPTIMIZATION" = yes; then 
	OPTIMIZATION_FLAG=on
	OPTIMIZATION_RUNS=$SOLC_OPTIMIZATION_RUNS
else
	OPTIMIZATION_FLAG=off
fi
"$TOOLS_DIR_NAME"/truffle-optimization-setting.sh $OPTIMIZATION_FLAG $OPTIMIZATION_RUNS



# This setting is probably no longer used:
# Copy config file, enter project directory
#if test "$GANACHE_CLI_PORT" = ""; then
#	GANACHE_CLI_PORT=33499
#fi


case $BLOCKCHAIN_BACKEND in
	ganache)
		TRUFFLE_CONFIG_PATH="$TRUFFLE_CONFIG_DIR"/truffle-ganache.js	
		;;
	geth)
		TRUFFLE_CONFIG_PATH="$TRUFFLE_CONFIG_DIR"/truffle-geth.js	
		;;
	*)
		echo Error: Unknown BLOCKCHAIN_BACKEND value selected in settings.cfg.sh: $BLOCKCHAIN_BACKEND
		exit 1
esac


cp "$TRUFFLE_CONFIG_PATH" "$PROJDIR"/truffle.js


if ! cd "$PROJDIR"; then
	echo Error: Cannot enter project directory $PROJDIR
	exit 1
fi

if ! test -d contracts; then
	echo "Error: Input directory $PROJDIR does not look like a truffle project - missing 'contracts' directory"
	exit 1
fi

cp "$TRUFFLE_CONFIG_DIR"/Migrations.sol contracts/Migrations.sol

if ! test -d test; then
	echo "Error: Input directory does not look like a truffle project - missing 'test' directory"
	exit 1
fi
if ! test -d migrations; then
	echo "Error: Input directory does not look like a truffle project - missing 'migrations' directory"
	exit 1
fi


run_ganache_cli() {
	GANACHE_CLI_PORT=33499 # TODO settings.cfg.sh? Difficulty: needs to be in sync with truffle-ganache.js 
	echo Starting RPC server on port "$GANACHE_CLI_PORT"...

	# TODO path 
	"$GANACHE_CLI_PATH" --port $GANACHE_CLI_PORT --gasLimit 0xfffffffffff --accounts 35 --mnemonic "icon wrestle whale a    utumn practice select fork frost festival cigar report move" --deterministic --verbose-rpc --allowUnlimitedContractSize --network-id test >TruffleTest.rpc.log 2>&1 &
	export RPC_SERVER_PID=$!

	# Wait for availability
	while ! grep "Listening on" TruffleTest.rpc.log; do
		sleep 1
	done
	echo RPC server ready
}


run_geth() {
	echo Starting geth - log set to "$GETH_LOG"...
	"$RUN_BACKGROUND_SCRIPT_PATH" "$GETH_START_SCRIPT_PATH" "$GETH_LOG"
	sleep 5 # TODO proper availability indicator
}

run_truffle_test() {
	rm -f profiling-events.log
	
	echo Deleting old results directory...
	rm -rf "$RESULTDIR"
	mkdir "$RESULTDIR"

	echo Starting truffle test...

	DUMMY_MIGRATIONS_DIR="./migrations_null"
	if test -d "$DUMMY_MIGRATIONS_DIR"; then
		rm -rf "$DUMMY_MIGRATIONS_DIR"
	fi
	mkdir "$DUMMY_MIGRATIONS_DIR" 


	#if test "$USE_SOLCJS" = yes; then
	#	# Use truffle, which will call solcjs internally
	#	"$NODEDIR"/node --max-old-space-size=8192 "$TRUFFLE_PATH" compile
	#else
	#	"$EXTERNAL_COMPILER_SCRIPT_PATH" ./contracts ./build
	#fi

	if test "$OVERRIDE_USE_SOLC_OPTIMIZATION" != ""; then
		export USE_SOLC_OPTIMIZATION="$OVERRIDE_USE_SOLC_OPTIMIZATION"
	fi
	if test "$OVERRIDE_SOLC_OPTIMIZATION_RUNS" != ""; then
		export SOLC_OPTIMIZATION_RUNS="$OVERRIDE_SOLC_OPTIMIZATION_RUNS"
	fi
	if test "$OVERRIDE_SOLC_USE_YUL_OPTIMIZER" != ""; then
		export SOLC_USE_YUL_OPTIMIZER="$OVERRIDE_SOLC_USE_YUL_OPTIMIZER"
	fi

	# Explicit truffle compilation step, using solcjs or solc, see truffle-compile.js
	if test "$USE_SOLCJS" = yes; then
		echo Preparing solcjs version "$SOLCJS_VERSION"
		if ! get-solcjs.sh "$SOLCJS_VERSION"; then
			echo "Error: Cannot get solcjs version $SOLCJS_VERSION - please adapt settings.cfg.sh as needed"
			exit 1
		fi
	fi
	"$NODEDIR"/node --max-old-space-size=8192 "$TRUFFLE_PATH" compile --network test
	# Migration step, picking up artifacts without recompilaton
	"$NODEDIR"/node --max-old-space-size=8192 "$TRUFFLE_PATH" migrate --network test --reset
	# Test step: run transactions on deployed contract and collect results
	"$NODEDIR"/node --max-old-space-size=8192 "$TRUFFLE_PATH" test test/test.js --network test --migrations_directory "$DUMMY_MIGRATIONS_DIR" >TruffleTest.log 2>&1
}

# Start local test blockchain backend
case $BLOCKCHAIN_BACKEND in
	ganache)
		run_ganache_cli
		;;
	geth)
		run_geth
		;;
	*)
		echo Error: Unknown BLOCKCHAIN_BACKEND value selected in settings.cfg.sh: $BLOCKCHAIN_BACKEND
		exit 1
esac
if test "$?" != 0; then
	echo Error: blockchain startup error
	exit 1
fi

# Deploy and run tests
run_truffle_test

RC=$?

# Save results
if test -f allFiredEvents; then  # this is only generated in some cases?!
	mv allFiredEvents "$RESULTDIR"
fi
mv profiling-events.log "$RESULTDIR"
mv TruffleTest.log "$RESULTDIR"
case $BLOCKCHAIN_BACKEND in
	ganache)
		mv TruffleTest.rpc.log "$RESULTDIR"
		;;
	geth)
		cp "$GETH_LOG" "$RESULTDIR"  
		;;
esac

echo Test run complete. Log files:
echo "      Events     - $PROJDIR/$RESULTDIR/profiling-events.log"
echo "      truffle    - $PROJDIR/$RESULTDIR/TruffleTest.log"
case $BLOCKCHAIN_BACKEND in
	ganache)
		echo "      RPC server - $PROJDIR/$RESULTDIR/TruffleTest.rpc.log"
		;;
	geth)
		echo "      RPC server - $PROJDIR/$RESULTDIR/`basename $GETH_LOG`"
		;;
esac


# Cleanup
case $BLOCKCHAIN_BACKEND in
	ganache)
		kill $RPC_SERVER_PID
		;;
	geth)
		killall geth
		;;
esac

if test "$RC" = 0; then
	echo OK
else
	echo ERROR
fi

exit "$RC"
